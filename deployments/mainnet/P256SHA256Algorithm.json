{
  "address": "0x92D6244D769050a1286Ac2BcBf8E471Ffa89e20D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d4d0a11cbb45d6f069329346b93d995b79ad07e34050d5fb6c6ad840a87798d",
  "receipt": {
    "to": null,
    "from": "0xC9B6314502A207642c241cFF8A0002a1eE07A1c7",
    "contractAddress": "0x92D6244D769050a1286Ac2BcBf8E471Ffa89e20D",
    "transactionIndex": 1,
    "gasUsed": "1955980",
    "logsBloom": "0x
    "blockHash": "0xb22d5cffd377737258132f93852a4789939b6a3e465ee819211cae5f83b98960",
    "transactionHash": "0x0d4d0a11cbb45d6f069329346b93d995b79ad07e34050d5fb6c6ad840a87798d",
    "logs": [],
    "blockNumber": 59031733,
    "cumulativeGasUsed": "1955980",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3004fb69145baf262ffd181d54fcaf95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(bytes,bytes,bytes)\":{\"details\":\"Verifies a signature.\",\"params\":{\"data\":\"The signed data to verify.\",\"key\":\"The public key to verify with.\",\"signature\":\"The signature to verify.\"},\"returns\":{\"_0\":\"True iff the signature is valid.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnssec-oracle/algorithms/P256SHA256Algorithm.sol\":\"P256SHA256Algorithm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(bytes memory self, bytes memory other)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if(offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if(otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n        \\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(bytes memory self, bytes memory other)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (uint8 ret)\\n    {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (uint16 ret)\\n    {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (uint32 ret)\\n    {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes32 ret)\\n    {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes20 ret)\\n    {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(\\n        uint256 dest,\\n        uint256 src,\\n        uint256 len\\n    ) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256**(32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x2503ba31d9395e7a8593668473ade6c2d568851a1595fd456c5dd75b2f5653f7\"},\"contracts/dnssec-oracle/algorithms/Algorithm.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev An interface for contracts implementing a DNSSEC (signing) algorithm.\\n */\\ninterface Algorithm {\\n    /**\\n     * @dev Verifies a signature.\\n     * @param key The public key to verify with.\\n     * @param data The signed data to verify.\\n     * @param signature The signature to verify.\\n     * @return True iff the signature is valid.\\n     */\\n    function verify(\\n        bytes calldata key,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xaf6825f9852c69f8e36540821d067b4550dd2263497af9d645309b6a0c457ba6\"},\"contracts/dnssec-oracle/algorithms/EllipticCurve.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @title   EllipticCurve\\n *\\n * @author  Tilman Drerup;\\n *\\n * @notice  Implements elliptic curve math; Parametrized for SECP256R1.\\n *\\n *          Includes components of code by Andreas Olofsson, Alexander Vlasov\\n *          (https://github.com/BANKEX/CurveArithmetics), and Avi Asayag\\n *          (https://github.com/orbs-network/elliptic-curve-solidity)\\n *\\n *          Source: https://github.com/tdrerup/elliptic-curve-solidity\\n *\\n * @dev     NOTE: To disambiguate public keys when verifying signatures, activate\\n *          condition 'rs[1] > lowSmax' in validateSignature().\\n */\\ncontract EllipticCurve {\\n    // Set parameters for curve.\\n    uint256 constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 constant p =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n\\n    uint256 constant lowSmax =\\n        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0;\\n\\n    /**\\n     * @dev Inverse of u in the field of modulo m.\\n     */\\n    function inverseMod(uint256 u, uint256 m) internal pure returns (uint256) {\\n        unchecked {\\n            if (u == 0 || u == m || m == 0) return 0;\\n            if (u > m) u = u % m;\\n\\n            int256 t1;\\n            int256 t2 = 1;\\n            uint256 r1 = m;\\n            uint256 r2 = u;\\n            uint256 q;\\n\\n            while (r2 != 0) {\\n                q = r1 / r2;\\n                (t1, t2, r1, r2) = (t2, t1 - int256(q) * t2, r2, r1 - q * r2);\\n            }\\n\\n            if (t1 < 0) return (m - uint256(-t1));\\n\\n            return uint256(t1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transform affine coordinates into projective coordinates.\\n     */\\n    function toProjectivePoint(uint256 x0, uint256 y0)\\n        internal\\n        pure\\n        returns (uint256[3] memory P)\\n    {\\n        P[2] = addmod(0, 1, p);\\n        P[0] = mulmod(x0, P[2], p);\\n        P[1] = mulmod(y0, P[2], p);\\n    }\\n\\n    /**\\n     * @dev Add two points in affine coordinates and return projective point.\\n     */\\n    function addAndReturnProjectivePoint(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 x2,\\n        uint256 y2\\n    ) internal pure returns (uint256[3] memory P) {\\n        uint256 x;\\n        uint256 y;\\n        (x, y) = add(x1, y1, x2, y2);\\n        P = toProjectivePoint(x, y);\\n    }\\n\\n    /**\\n     * @dev Transform from projective to affine coordinates.\\n     */\\n    function toAffinePoint(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0\\n    ) internal pure returns (uint256 x1, uint256 y1) {\\n        uint256 z0Inv;\\n        z0Inv = inverseMod(z0, p);\\n        x1 = mulmod(x0, z0Inv, p);\\n        y1 = mulmod(y0, z0Inv, p);\\n    }\\n\\n    /**\\n     * @dev Return the zero curve in projective coordinates.\\n     */\\n    function zeroProj()\\n        internal\\n        pure\\n        returns (\\n            uint256 x,\\n            uint256 y,\\n            uint256 z\\n        )\\n    {\\n        return (0, 1, 0);\\n    }\\n\\n    /**\\n     * @dev Return the zero curve in affine coordinates.\\n     */\\n    function zeroAffine() internal pure returns (uint256 x, uint256 y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve.\\n     */\\n    function isZeroCurve(uint256 x0, uint256 y0)\\n        internal\\n        pure\\n        returns (bool isZero)\\n    {\\n        if (x0 == 0 && y0 == 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve.\\n     */\\n    function isOnCurve(uint256 x, uint256 y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n\\n        uint256 LHS = mulmod(y, y, p); // y^2\\n        uint256 RHS = mulmod(mulmod(x, x, p), x, p); // x^3\\n\\n        if (a != 0) {\\n            RHS = addmod(RHS, mulmod(x, a, p), p); // x^3 + a*x\\n        }\\n        if (b != 0) {\\n            RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n        }\\n\\n        return LHS == RHS;\\n    }\\n\\n    /**\\n     * @dev Double an elliptic curve point in projective coordinates. See\\n     * https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\\n     */\\n    function twiceProj(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x1,\\n            uint256 y1,\\n            uint256 z1\\n        )\\n    {\\n        uint256 t;\\n        uint256 u;\\n        uint256 v;\\n        uint256 w;\\n\\n        if (isZeroCurve(x0, y0)) {\\n            return zeroProj();\\n        }\\n\\n        u = mulmod(y0, z0, p);\\n        u = mulmod(u, 2, p);\\n\\n        v = mulmod(u, x0, p);\\n        v = mulmod(v, y0, p);\\n        v = mulmod(v, 2, p);\\n\\n        x0 = mulmod(x0, x0, p);\\n        t = mulmod(x0, 3, p);\\n\\n        z0 = mulmod(z0, z0, p);\\n        z0 = mulmod(z0, a, p);\\n        t = addmod(t, z0, p);\\n\\n        w = mulmod(t, t, p);\\n        x0 = mulmod(2, v, p);\\n        w = addmod(w, p - x0, p);\\n\\n        x0 = addmod(v, p - w, p);\\n        x0 = mulmod(t, x0, p);\\n        y0 = mulmod(y0, u, p);\\n        y0 = mulmod(y0, y0, p);\\n        y0 = mulmod(2, y0, p);\\n        y1 = addmod(x0, p - y0, p);\\n\\n        x1 = mulmod(u, w, p);\\n\\n        z1 = mulmod(u, u, p);\\n        z1 = mulmod(z1, u, p);\\n    }\\n\\n    /**\\n     * @dev Add two elliptic curve points in projective coordinates. See\\n     * https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\\n     */\\n    function addProj(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0,\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x2,\\n            uint256 y2,\\n            uint256 z2\\n        )\\n    {\\n        uint256 t0;\\n        uint256 t1;\\n        uint256 u0;\\n        uint256 u1;\\n\\n        if (isZeroCurve(x0, y0)) {\\n            return (x1, y1, z1);\\n        } else if (isZeroCurve(x1, y1)) {\\n            return (x0, y0, z0);\\n        }\\n\\n        t0 = mulmod(y0, z1, p);\\n        t1 = mulmod(y1, z0, p);\\n\\n        u0 = mulmod(x0, z1, p);\\n        u1 = mulmod(x1, z0, p);\\n\\n        if (u0 == u1) {\\n            if (t0 == t1) {\\n                return twiceProj(x0, y0, z0);\\n            } else {\\n                return zeroProj();\\n            }\\n        }\\n\\n        (x2, y2, z2) = addProj2(mulmod(z0, z1, p), u0, u1, t1, t0);\\n    }\\n\\n    /**\\n     * @dev Helper function that splits addProj to avoid too many local variables.\\n     */\\n    function addProj2(\\n        uint256 v,\\n        uint256 u0,\\n        uint256 u1,\\n        uint256 t1,\\n        uint256 t0\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 x2,\\n            uint256 y2,\\n            uint256 z2\\n        )\\n    {\\n        uint256 u;\\n        uint256 u2;\\n        uint256 u3;\\n        uint256 w;\\n        uint256 t;\\n\\n        t = addmod(t0, p - t1, p);\\n        u = addmod(u0, p - u1, p);\\n        u2 = mulmod(u, u, p);\\n\\n        w = mulmod(t, t, p);\\n        w = mulmod(w, v, p);\\n        u1 = addmod(u1, u0, p);\\n        u1 = mulmod(u1, u2, p);\\n        w = addmod(w, p - u1, p);\\n\\n        x2 = mulmod(u, w, p);\\n\\n        u3 = mulmod(u2, u, p);\\n        u0 = mulmod(u0, u2, p);\\n        u0 = addmod(u0, p - w, p);\\n        t = mulmod(t, u0, p);\\n        t0 = mulmod(t0, u3, p);\\n\\n        y2 = addmod(t, p - t0, p);\\n\\n        z2 = mulmod(u3, v, p);\\n    }\\n\\n    /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n    function add(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 x1,\\n        uint256 y1\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 z0;\\n\\n        (x0, y0, z0) = addProj(x0, y0, 1, x1, y1, 1);\\n\\n        return toAffinePoint(x0, y0, z0);\\n    }\\n\\n    /**\\n     * @dev Double an elliptic curve point in affine coordinates.\\n     */\\n    function twice(uint256 x0, uint256 y0)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 z0;\\n\\n        (x0, y0, z0) = twiceProj(x0, y0, 1);\\n\\n        return toAffinePoint(x0, y0, z0);\\n    }\\n\\n    /**\\n     * @dev Multiply an elliptic curve point by a 2 power base (i.e., (2^exp)*P)).\\n     */\\n    function multiplyPowerBase2(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 exp\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 base2X = x0;\\n        uint256 base2Y = y0;\\n        uint256 base2Z = 1;\\n\\n        for (uint256 i = 0; i < exp; i++) {\\n            (base2X, base2Y, base2Z) = twiceProj(base2X, base2Y, base2Z);\\n        }\\n\\n        return toAffinePoint(base2X, base2Y, base2Z);\\n    }\\n\\n    /**\\n     * @dev Multiply an elliptic curve point by a scalar.\\n     */\\n    function multiplyScalar(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 scalar\\n    ) internal pure returns (uint256 x1, uint256 y1) {\\n        if (scalar == 0) {\\n            return zeroAffine();\\n        } else if (scalar == 1) {\\n            return (x0, y0);\\n        } else if (scalar == 2) {\\n            return twice(x0, y0);\\n        }\\n\\n        uint256 base2X = x0;\\n        uint256 base2Y = y0;\\n        uint256 base2Z = 1;\\n        uint256 z1 = 1;\\n        x1 = x0;\\n        y1 = y0;\\n\\n        if (scalar % 2 == 0) {\\n            x1 = y1 = 0;\\n        }\\n\\n        scalar = scalar >> 1;\\n\\n        while (scalar > 0) {\\n            (base2X, base2Y, base2Z) = twiceProj(base2X, base2Y, base2Z);\\n\\n            if (scalar % 2 == 1) {\\n                (x1, y1, z1) = addProj(base2X, base2Y, base2Z, x1, y1, z1);\\n            }\\n\\n            scalar = scalar >> 1;\\n        }\\n\\n        return toAffinePoint(x1, y1, z1);\\n    }\\n\\n    /**\\n     * @dev Multiply the curve's generator point by a scalar.\\n     */\\n    function multipleGeneratorByScalar(uint256 scalar)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        return multiplyScalar(gx, gy, scalar);\\n    }\\n\\n    /**\\n     * @dev Validate combination of message, signature, and public key.\\n     */\\n    function validateSignature(\\n        bytes32 message,\\n        uint256[2] memory rs,\\n        uint256[2] memory Q\\n    ) internal pure returns (bool) {\\n        // To disambiguate between public key solutions, include comment below.\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            // || rs[1] > lowSmax)\\n            return false;\\n        }\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n\\n        uint256 x1;\\n        uint256 x2;\\n        uint256 y1;\\n        uint256 y2;\\n\\n        uint256 sInv = inverseMod(rs[1], n);\\n        (x1, y1) = multiplyScalar(gx, gy, mulmod(uint256(message), sInv, n));\\n        (x2, y2) = multiplyScalar(Q[0], Q[1], mulmod(rs[0], sInv, n));\\n        uint256[3] memory P = addAndReturnProjectivePoint(x1, y1, x2, y2);\\n\\n        if (P[2] == 0) {\\n            return false;\\n        }\\n\\n        uint256 Px = inverseMod(P[2], p);\\n        Px = mulmod(P[0], mulmod(Px, Px, p), p);\\n\\n        return Px % n == rs[0];\\n    }\\n}\\n\",\"keccak256\":\"0xbe9e9eed22695317ed119b4e930a70d1427ec4449960ab6e3481dcba26ad532d\"},\"contracts/dnssec-oracle/algorithms/P256SHA256Algorithm.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./Algorithm.sol\\\";\\nimport \\\"./EllipticCurve.sol\\\";\\nimport \\\"../BytesUtils.sol\\\";\\n\\ncontract P256SHA256Algorithm is Algorithm, EllipticCurve {\\n    using BytesUtils for *;\\n\\n    /**\\n     * @dev Verifies a signature.\\n     * @param key The public key to verify with.\\n     * @param data The signed data to verify.\\n     * @param signature The signature to verify.\\n     * @return True iff the signature is valid.\\n     */\\n    function verify(\\n        bytes calldata key,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external view override returns (bool) {\\n        return\\n            validateSignature(\\n                sha256(data),\\n                parseSignature(signature),\\n                parseKey(key)\\n            );\\n    }\\n\\n    function parseSignature(bytes memory data)\\n        internal\\n        pure\\n        returns (uint256[2] memory)\\n    {\\n        require(data.length == 64, \\\"Invalid p256 signature length\\\");\\n        return [uint256(data.readBytes32(0)), uint256(data.readBytes32(32))];\\n    }\\n\\n    function parseKey(bytes memory data)\\n        internal\\n        pure\\n        returns (uint256[2] memory)\\n    {\\n        require(data.length == 68, \\\"Invalid p256 key length\\\");\\n        return [uint256(data.readBytes32(4)), uint256(data.readBytes32(36))];\\n    }\\n}\\n\",\"keccak256\":\"0x6848ece185305c285c8f2d1a1f665068b2acd957a8bb5cdfc47726a0e4b83c46\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611cfa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004a60048036038101906100459190611906565b610060565b60405161005791906119d5565b60405180910390f35b600061015660028686604051610077929190611a2f565b602060405180830381855afa158015610094573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906100b79190611a7e565b61010485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610162565b6101518a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506101f6565b61028a565b90509695505050505050565b61016a611853565b60408251146101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b08565b60405180910390fd5b60405180604001604052806101cd60008561061a90919063ffffffff16565b60001c81526020016101e960208561061a90919063ffffffff16565b60001c8152509050919050565b6101fe611853565b6044825114610242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023990611b74565b60405180910390fd5b604051806040016040528061026160048561061a90919063ffffffff16565b60001c815260200161027d60248561061a90919063ffffffff16565b60001c8152509050919050565b600080836000600281106102a1576102a0611b94565b5b602002015114806102ea57507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551836000600281106102e2576102e1611b94565b5b602002015110155b8061030d575060008360016002811061030657610305611b94565b5b6020020151145b1561031b5760009050610613565b6103558260006002811061033257610331611b94565b5b60200201518360016002811061034b5761034a611b94565b5b6020020151610645565b6103625760009050610613565b60008060008060006103ac8860016002811061038157610380611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255161088e565b905061042d7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f57fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518061042257610421611bc3565b5b848d60001c0961094c565b80945081965050506104b98760006002811061044c5761044b611b94565b5b60200201518860016002811061046557610464611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518061049957610498611bc3565b5b848c6000600281106104ae576104ad611b94565b5b60200201510961094c565b809350819550505060006104cf86858786610a4d565b90506000816002600381106104e7576104e6611b94565b5b6020020151036105005760009650505050505050610613565b60006105448260026003811061051957610518611b94565b5b60200201517fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61088e565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061057557610574611bc3565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806105a4576105a3611bc3565b5b828309836000600381106105bb576105ba611b94565b5b6020020151099050896000600281106105d7576105d6611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551826106089190611bfc565b149750505050505050505b9392505050565b6000825160208361062b9190611c5c565b111561063657600080fd5b81602084010151905092915050565b6000826000148061067557507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b806106805750816000145b806106aa57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b156106b85760009050610888565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806106e9576106e8611bc3565b5b838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061071f5761071e611bc3565b5b857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061074f5761074e611bc3565b5b87880909905060007fffffffff00000001000000000000000000000000fffffffffffffffffffffffc14610803577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806107ac576107ab611bc3565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806107db576107da611bc3565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc8709820890505b60007f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b14610880577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061085a57610859611bc3565b5b7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b820890505b808214925050505b92915050565b60008083148061089d57508183145b806108a85750600082145b156108b65760009050610946565b818311156108d2578183816108ce576108cd611bc3565b5b0692505b600080600190506000849050600086905060005b60008214610922578183816108fe576108fd611bc3565b5b049050838482028603838484028603809550819650829750839850505050506108e6565b600085121561093d5784600003870395505050505050610946565b84955050505050505b92915050565b600080600083036109685761095f610a82565b91509150610a45565b6001830361097b57848491509150610a45565b600283036109965761098d8585610a90565b91509150610a45565b6000859050600085905060006001905060006001905088955087945060006002886109c19190611bfc565b036109ce57600094508495505b600187901c96505b6000871115610a31576109ea848484610ac4565b8094508195508296505050506001600288610a059190611bfc565b03610a2557610a18848484898986611021565b8093508197508298505050505b600187901c96506109d6565b610a3c8686836111d8565b95509550505050505b935093915050565b610a55611875565b600080610a648787878761127a565b8092508193505050610a7682826112b4565b92505050949350505050565b600080600080915091509091565b6000806000610aa185856001610ac4565b809350819650829750505050610ab88585836111d8565b92509250509250929050565b6000806000806000806000610ad98a8a6113e1565b15610af557610ae661140b565b96509650965050505050611018565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b2457610b23611bc3565b5b888a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b5857610b57611bc3565b5b6002840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b8d57610b8c611bc3565b5b8a840991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610bc157610bc0611bc3565b5b89830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610bf557610bf4611bc3565b5b6002830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c2a57610c29611bc3565b5b8a8b0999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c5e57610c5d611bc3565b5b60038b0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c9357610c92611bc3565b5b88890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610cc757610cc6611bc3565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d1b57610d1a611bc3565b5b88850893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d4f57610d4e611bc3565b5b84850990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d8357610d82611bc3565b5b8260020999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610db857610db7611bc3565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610de49190611c90565b820890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e1757610e16611bc3565b5b817fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610e439190611c90565b830899507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e7657610e75611bc3565b5b8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610eaa57610ea9611bc3565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610ede57610edd611bc3565b5b898a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f1257610f11611bc3565b5b8960020998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f4757610f46611bc3565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610f739190611c90565b8b0895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fa657610fa5611bc3565b5b81840996507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fda57610fd9611bc3565b5b83840994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061100e5761100d611bc3565b5b8386099450505050505b93509350939050565b60008060008060008060006110368d8d6113e1565b1561104d57898989965096509650505050506111cc565b6110578a8a6113e1565b1561106e578c8c8c965096509650505050506111cc565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061109d5761109c611bc3565b5b888d0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806110d1576110d0611bc3565b5b8b8a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061110557611104611bc3565b5b888e0991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061113957611138611bc3565b5b8b8b09905080820361117d57828403611166576111578d8d8d610ac4565b965096509650505050506111cc565b61116e61140b565b965096509650505050506111cc565b6111bb7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806111af576111ae611bc3565b5b898d0983838688611420565b809750819850829950505050505050505b96509650969350505050565b6000806000611207847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61088e565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061123857611237611bc3565b5b81870992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061126c5761126b611bc3565b5b818609915050935093915050565b600080600061128f8787600188886001611021565b8093508198508299505050506112a68787836111d8565b925092505094509492505050565b6112bc611875565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806112eb576112ea611bc3565b5b60016000088160026003811061130457611303611b94565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061133c5761133b611bc3565b5b816002600381106113505761134f611b94565b5b602002015184098160006003811061136b5761136a611b94565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806113a3576113a2611bc3565b5b816002600381106113b7576113b6611b94565b5b60200201518309816001600381106113d2576113d1611b94565b5b60200201818152505092915050565b600080831480156113f25750600082145b156114005760019050611405565b600090505b92915050565b60008060008060016000925092509250909192565b6000806000806000806000807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061145b5761145a611bc3565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6114879190611c90565b8a0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806114ba576114b9611bc3565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6114e69190611c90565b8d0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061151957611518611bc3565b5b85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061154d5761154c611bc3565b5b81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061158157611580611bc3565b5b8d830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806115b5576115b4611bc3565b5b8c8c089a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806115e9576115e8611bc3565b5b848c099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061161d5761161c611bc3565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6116499190611c90565b830891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061167c5761167b611bc3565b5b82860997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116b0576116af611bc3565b5b85850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116e4576116e3611bc3565b5b848d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061171857611717611bc3565b5b827fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6117449190611c90565b8d089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061177757611776611bc3565b5b8c820990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806117ab576117aa611bc3565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806117df576117de611bc3565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61180b9190611c90565b820896507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061183e5761183d611bc3565b5b8d840995505050505050955095509592505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118c6576118c56118a1565b5b8235905067ffffffffffffffff8111156118e3576118e26118a6565b5b6020830191508360018202830111156118ff576118fe6118ab565b5b9250929050565b6000806000806000806060878903121561192357611922611897565b5b600087013567ffffffffffffffff8111156119415761194061189c565b5b61194d89828a016118b0565b9650965050602087013567ffffffffffffffff8111156119705761196f61189c565b5b61197c89828a016118b0565b9450945050604087013567ffffffffffffffff81111561199f5761199e61189c565b5b6119ab89828a016118b0565b92509250509295509295509295565b60008115159050919050565b6119cf816119ba565b82525050565b60006020820190506119ea60008301846119c6565b92915050565b600081905092915050565b82818337600083830152505050565b6000611a1683856119f0565b9350611a238385846119fb565b82840190509392505050565b6000611a3c828486611a0a565b91508190509392505050565b6000819050919050565b611a5b81611a48565b8114611a6657600080fd5b50565b600081519050611a7881611a52565b92915050565b600060208284031215611a9457611a93611897565b5b6000611aa284828501611a69565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642070323536207369676e6174757265206c656e677468000000600082015250565b6000611af2601d83611aab565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b7f496e76616c69642070323536206b6579206c656e677468000000000000000000600082015250565b6000611b5e601783611aab565b9150611b6982611b28565b602082019050919050565b60006020820190508181036000830152611b8d81611b51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000819050919050565b6000611c0782611bf2565b9150611c1283611bf2565b925082611c2257611c21611bc3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c6782611bf2565b9150611c7283611bf2565b9250828201905080821115611c8a57611c89611c2d565b5b92915050565b6000611c9b82611bf2565b9150611ca683611bf2565b9250828203905081811115611cbe57611cbd611c2d565b5b9291505056fea26469706673582212206d98dbbbda9a755148ced3dd5196e2aecb458d5426a7ab58c34b28b6ef1032e764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004a60048036038101906100459190611906565b610060565b60405161005791906119d5565b60405180910390f35b600061015660028686604051610077929190611a2f565b602060405180830381855afa158015610094573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906100b79190611a7e565b61010485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610162565b6101518a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506101f6565b61028a565b90509695505050505050565b61016a611853565b60408251146101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590611b08565b60405180910390fd5b60405180604001604052806101cd60008561061a90919063ffffffff16565b60001c81526020016101e960208561061a90919063ffffffff16565b60001c8152509050919050565b6101fe611853565b6044825114610242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023990611b74565b60405180910390fd5b604051806040016040528061026160048561061a90919063ffffffff16565b60001c815260200161027d60248561061a90919063ffffffff16565b60001c8152509050919050565b600080836000600281106102a1576102a0611b94565b5b602002015114806102ea57507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551836000600281106102e2576102e1611b94565b5b602002015110155b8061030d575060008360016002811061030657610305611b94565b5b6020020151145b1561031b5760009050610613565b6103558260006002811061033257610331611b94565b5b60200201518360016002811061034b5761034a611b94565b5b6020020151610645565b6103625760009050610613565b60008060008060006103ac8860016002811061038157610380611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255161088e565b905061042d7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f57fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518061042257610421611bc3565b5b848d60001c0961094c565b80945081965050506104b98760006002811061044c5761044b611b94565b5b60200201518860016002811061046557610464611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518061049957610498611bc3565b5b848c6000600281106104ae576104ad611b94565b5b60200201510961094c565b809350819550505060006104cf86858786610a4d565b90506000816002600381106104e7576104e6611b94565b5b6020020151036105005760009650505050505050610613565b60006105448260026003811061051957610518611b94565b5b60200201517fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61088e565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061057557610574611bc3565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806105a4576105a3611bc3565b5b828309836000600381106105bb576105ba611b94565b5b6020020151099050896000600281106105d7576105d6611b94565b5b60200201517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551826106089190611bfc565b149750505050505050505b9392505050565b6000825160208361062b9190611c5c565b111561063657600080fd5b81602084010151905092915050565b6000826000148061067557507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b806106805750816000145b806106aa57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b156106b85760009050610888565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806106e9576106e8611bc3565b5b838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061071f5761071e611bc3565b5b857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061074f5761074e611bc3565b5b87880909905060007fffffffff00000001000000000000000000000000fffffffffffffffffffffffc14610803577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806107ac576107ab611bc3565b5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806107db576107da611bc3565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc8709820890505b60007f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b14610880577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061085a57610859611bc3565b5b7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b820890505b808214925050505b92915050565b60008083148061089d57508183145b806108a85750600082145b156108b65760009050610946565b818311156108d2578183816108ce576108cd611bc3565b5b0692505b600080600190506000849050600086905060005b60008214610922578183816108fe576108fd611bc3565b5b049050838482028603838484028603809550819650829750839850505050506108e6565b600085121561093d5784600003870395505050505050610946565b84955050505050505b92915050565b600080600083036109685761095f610a82565b91509150610a45565b6001830361097b57848491509150610a45565b600283036109965761098d8585610a90565b91509150610a45565b6000859050600085905060006001905060006001905088955087945060006002886109c19190611bfc565b036109ce57600094508495505b600187901c96505b6000871115610a31576109ea848484610ac4565b8094508195508296505050506001600288610a059190611bfc565b03610a2557610a18848484898986611021565b8093508197508298505050505b600187901c96506109d6565b610a3c8686836111d8565b95509550505050505b935093915050565b610a55611875565b600080610a648787878761127a565b8092508193505050610a7682826112b4565b92505050949350505050565b600080600080915091509091565b6000806000610aa185856001610ac4565b809350819650829750505050610ab88585836111d8565b92509250509250929050565b6000806000806000806000610ad98a8a6113e1565b15610af557610ae661140b565b96509650965050505050611018565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b2457610b23611bc3565b5b888a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b5857610b57611bc3565b5b6002840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610b8d57610b8c611bc3565b5b8a840991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610bc157610bc0611bc3565b5b89830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610bf557610bf4611bc3565b5b6002830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c2a57610c29611bc3565b5b8a8b0999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c5e57610c5d611bc3565b5b60038b0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610c9357610c92611bc3565b5b88890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610cc757610cc6611bc3565b5b7fffffffff00000001000000000000000000000000fffffffffffffffffffffffc890997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d1b57610d1a611bc3565b5b88850893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d4f57610d4e611bc3565b5b84850990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610d8357610d82611bc3565b5b8260020999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610db857610db7611bc3565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610de49190611c90565b820890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e1757610e16611bc3565b5b817fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610e439190611c90565b830899507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610e7657610e75611bc3565b5b8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610eaa57610ea9611bc3565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610ede57610edd611bc3565b5b898a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f1257610f11611bc3565b5b8960020998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610f4757610f46611bc3565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff610f739190611c90565b8b0895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fa657610fa5611bc3565b5b81840996507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80610fda57610fd9611bc3565b5b83840994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061100e5761100d611bc3565b5b8386099450505050505b93509350939050565b60008060008060008060006110368d8d6113e1565b1561104d57898989965096509650505050506111cc565b6110578a8a6113e1565b1561106e578c8c8c965096509650505050506111cc565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061109d5761109c611bc3565b5b888d0993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806110d1576110d0611bc3565b5b8b8a0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061110557611104611bc3565b5b888e0991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061113957611138611bc3565b5b8b8b09905080820361117d57828403611166576111578d8d8d610ac4565b965096509650505050506111cc565b61116e61140b565b965096509650505050506111cc565b6111bb7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806111af576111ae611bc3565b5b898d0983838688611420565b809750819850829950505050505050505b96509650969350505050565b6000806000611207847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61088e565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061123857611237611bc3565b5b81870992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061126c5761126b611bc3565b5b818609915050935093915050565b600080600061128f8787600188886001611021565b8093508198508299505050506112a68787836111d8565b925092505094509492505050565b6112bc611875565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806112eb576112ea611bc3565b5b60016000088160026003811061130457611303611b94565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061133c5761133b611bc3565b5b816002600381106113505761134f611b94565b5b602002015184098160006003811061136b5761136a611b94565b5b6020020181815250507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806113a3576113a2611bc3565b5b816002600381106113b7576113b6611b94565b5b60200201518309816001600381106113d2576113d1611b94565b5b60200201818152505092915050565b600080831480156113f25750600082145b156114005760019050611405565b600090505b92915050565b60008060008060016000925092509250909192565b6000806000806000806000807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061145b5761145a611bc3565b5b8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6114879190611c90565b8a0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806114ba576114b9611bc3565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6114e69190611c90565b8d0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061151957611518611bc3565b5b85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061154d5761154c611bc3565b5b81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061158157611580611bc3565b5b8d830991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806115b5576115b4611bc3565b5b8c8c089a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806115e9576115e8611bc3565b5b848c099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061161d5761161c611bc3565b5b8b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6116499190611c90565b830891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061167c5761167b611bc3565b5b82860997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116b0576116af611bc3565b5b85850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806116e4576116e3611bc3565b5b848d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061171857611717611bc3565b5b827fffffffff00000001000000000000000000000000ffffffffffffffffffffffff6117449190611c90565b8d089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061177757611776611bc3565b5b8c820990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806117ab576117aa611bc3565b5b838a0998507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff806117df576117de611bc3565b5b897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff61180b9190611c90565b820896507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8061183e5761183d611bc3565b5b8d840995505050505050955095509592505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118c6576118c56118a1565b5b8235905067ffffffffffffffff8111156118e3576118e26118a6565b5b6020830191508360018202830111156118ff576118fe6118ab565b5b9250929050565b6000806000806000806060878903121561192357611922611897565b5b600087013567ffffffffffffffff8111156119415761194061189c565b5b61194d89828a016118b0565b9650965050602087013567ffffffffffffffff8111156119705761196f61189c565b5b61197c89828a016118b0565b9450945050604087013567ffffffffffffffff81111561199f5761199e61189c565b5b6119ab89828a016118b0565b92509250509295509295509295565b60008115159050919050565b6119cf816119ba565b82525050565b60006020820190506119ea60008301846119c6565b92915050565b600081905092915050565b82818337600083830152505050565b6000611a1683856119f0565b9350611a238385846119fb565b82840190509392505050565b6000611a3c828486611a0a565b91508190509392505050565b6000819050919050565b611a5b81611a48565b8114611a6657600080fd5b50565b600081519050611a7881611a52565b92915050565b600060208284031215611a9457611a93611897565b5b6000611aa284828501611a69565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642070323536207369676e6174757265206c656e677468000000600082015250565b6000611af2601d83611aab565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b7f496e76616c69642070323536206b6579206c656e677468000000000000000000600082015250565b6000611b5e601783611aab565b9150611b6982611b28565b602082019050919050565b60006020820190508181036000830152611b8d81611b51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000819050919050565b6000611c0782611bf2565b9150611c1283611bf2565b925082611c2257611c21611bc3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c6782611bf2565b9150611c7283611bf2565b9250828201905080821115611c8a57611c89611c2d565b5b92915050565b6000611c9b82611bf2565b9150611ca683611bf2565b9250828203905081811115611cbe57611cbd611c2d565b5b9291505056fea26469706673582212206d98dbbbda9a755148ced3dd5196e2aecb458d5426a7ab58c34b28b6ef1032e764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verify(bytes,bytes,bytes)": {
        "details": "Verifies a signature.",
        "params": {
          "data": "The signed data to verify.",
          "key": "The public key to verify with.",
          "signature": "The signature to verify."
        },
        "returns": {
          "_0": "True iff the signature is valid."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}